// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stl_sort
NumericVector stl_sort(NumericVector x);
RcppExport SEXP _rqPen_stl_sort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort(x));
    return rcpp_result_gen;
END_RCPP
}
// find_indices
NumericVector find_indices(NumericVector x, int k);
RcppExport SEXP _rqPen_find_indices(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(find_indices(x, k));
    return rcpp_result_gen;
END_RCPP
}
// rq_loss_aug
NumericVector rq_loss_aug(NumericVector r, NumericVector tau);
RcppExport SEXP _rqPen_rq_loss_aug(SEXP rSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(rq_loss_aug(r, tau));
    return rcpp_result_gen;
END_RCPP
}
// rq_huber_deriv_aug
NumericVector rq_huber_deriv_aug(NumericVector r, NumericVector tau, double gmma);
RcppExport SEXP _rqPen_rq_huber_deriv_aug(SEXP rSEXP, SEXP tauSEXP, SEXP gmmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type gmma(gmmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rq_huber_deriv_aug(r, tau, gmma));
    return rcpp_result_gen;
END_RCPP
}
// neg_gradient_aug
NumericVector neg_gradient_aug(NumericVector r, arma::vec weights, NumericVector tau, double gmma, arma::sp_mat x, int ntau);
RcppExport SEXP _rqPen_neg_gradient_aug(SEXP rSEXP, SEXP weightsSEXP, SEXP tauSEXP, SEXP gmmaSEXP, SEXP xSEXP, SEXP ntauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type gmma(gmmaSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ntau(ntauSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_gradient_aug(r, weights, tau, gmma, x, ntau));
    return rcpp_result_gen;
END_RCPP
}
// negGradientAug
NumericVector negGradientAug(NumericVector r, arma::vec weights, NumericVector tau, double gmma, arma::sp_mat x, int ntau);
RcppExport SEXP _rqPen_negGradientAug(SEXP rSEXP, SEXP weightsSEXP, SEXP tauSEXP, SEXP gmmaSEXP, SEXP xSEXP, SEXP ntauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type gmma(gmmaSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ntau(ntauSEXP);
    rcpp_result_gen = Rcpp::wrap(negGradientAug(r, weights, tau, gmma, x, ntau));
    return rcpp_result_gen;
END_RCPP
}
// l2_norm
double l2_norm(NumericVector x);
RcppExport SEXP _rqPen_l2_norm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_norm(x));
    return rcpp_result_gen;
END_RCPP
}
// weighted_norm
double weighted_norm(Rcpp::NumericVector x, Rcpp::NumericVector normweights);
RcppExport SEXP _rqPen_weighted_norm(SEXP xSEXP, SEXP normweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type normweights(normweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_norm(x, normweights));
    return rcpp_result_gen;
END_RCPP
}
// solvebetaCpp
List solvebetaCpp(arma::sp_mat x, arma::vec y, int n, NumericVector tau, double gmma, arma::vec weights, NumericVector groupIndex, double lambdaj, NumericVector wlambda, NumericVector wtau, NumericVector eigenval, NumericVector betaini, int maxIter, double epsilon, int ntau);
RcppExport SEXP _rqPen_solvebetaCpp(SEXP xSEXP, SEXP ySEXP, SEXP nSEXP, SEXP tauSEXP, SEXP gmmaSEXP, SEXP weightsSEXP, SEXP groupIndexSEXP, SEXP lambdajSEXP, SEXP wlambdaSEXP, SEXP wtauSEXP, SEXP eigenvalSEXP, SEXP betainiSEXP, SEXP maxIterSEXP, SEXP epsilonSEXP, SEXP ntauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type gmma(gmmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type groupIndex(groupIndexSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaj(lambdajSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wlambda(wlambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wtau(wtauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eigenval(eigenvalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betaini(betainiSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type ntau(ntauSEXP);
    rcpp_result_gen = Rcpp::wrap(solvebetaCpp(x, y, n, tau, gmma, weights, groupIndex, lambdaj, wlambda, wtau, eigenval, betaini, maxIter, epsilon, ntau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rqPen_stl_sort", (DL_FUNC) &_rqPen_stl_sort, 1},
    {"_rqPen_find_indices", (DL_FUNC) &_rqPen_find_indices, 2},
    {"_rqPen_rq_loss_aug", (DL_FUNC) &_rqPen_rq_loss_aug, 2},
    {"_rqPen_rq_huber_deriv_aug", (DL_FUNC) &_rqPen_rq_huber_deriv_aug, 3},
    {"_rqPen_neg_gradient_aug", (DL_FUNC) &_rqPen_neg_gradient_aug, 6},
    {"_rqPen_negGradientAug", (DL_FUNC) &_rqPen_negGradientAug, 6},
    {"_rqPen_l2_norm", (DL_FUNC) &_rqPen_l2_norm, 1},
    {"_rqPen_weighted_norm", (DL_FUNC) &_rqPen_weighted_norm, 2},
    {"_rqPen_solvebetaCpp", (DL_FUNC) &_rqPen_solvebetaCpp, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_rqPen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
